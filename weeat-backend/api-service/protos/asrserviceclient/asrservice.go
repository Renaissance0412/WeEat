// Code generated by goctl. DO NOT EDIT.
// Source: asr_service.proto

package asrserviceclient

import (
	"context"

	"api-service/protos/asrservice"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	ASRRequest  = asrservice.ASRRequest
	ASRResponse = asrservice.ASRResponse

	ASRService interface {
		// ASR with stream response method
		StreamRecognize(ctx context.Context, in *ASRRequest, opts ...grpc.CallOption) (asrservice.ASRService_StreamRecognizeClient, error)
		// ASR with sync response method
		SyncRecognize(ctx context.Context, in *ASRRequest, opts ...grpc.CallOption) (*ASRResponse, error)
	}

	defaultASRService struct {
		cli zrpc.Client
	}
)

func NewASRService(cli zrpc.Client) ASRService {
	return &defaultASRService{
		cli: cli,
	}
}

// ASR with stream response method
func (m *defaultASRService) StreamRecognize(ctx context.Context, in *ASRRequest, opts ...grpc.CallOption) (asrservice.ASRService_StreamRecognizeClient, error) {
	client := asrservice.NewASRServiceClient(m.cli.Conn())
	return client.StreamRecognize(ctx, in, opts...)
}

// ASR with sync response method
func (m *defaultASRService) SyncRecognize(ctx context.Context, in *ASRRequest, opts ...grpc.CallOption) (*ASRResponse, error) {
	client := asrservice.NewASRServiceClient(m.cli.Conn())
	return client.SyncRecognize(ctx, in, opts...)
}
