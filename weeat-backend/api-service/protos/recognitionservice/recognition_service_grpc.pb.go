// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.19.4
// source: recognition_service.proto

package recognitionservice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	RecognitionService_Recognize_FullMethodName = "/recognition.RecognitionService/Recognize"
)

// RecognitionServiceClient is the client API for RecognitionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Export recognition service for client
type RecognitionServiceClient interface {
	// Recognize image and return recognition result
	Recognize(ctx context.Context, in *RecognitionRequest, opts ...grpc.CallOption) (*RecognitionResponse, error)
}

type recognitionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRecognitionServiceClient(cc grpc.ClientConnInterface) RecognitionServiceClient {
	return &recognitionServiceClient{cc}
}

func (c *recognitionServiceClient) Recognize(ctx context.Context, in *RecognitionRequest, opts ...grpc.CallOption) (*RecognitionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RecognitionResponse)
	err := c.cc.Invoke(ctx, RecognitionService_Recognize_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecognitionServiceServer is the server API for RecognitionService service.
// All implementations must embed UnimplementedRecognitionServiceServer
// for forward compatibility
//
// Export recognition service for client
type RecognitionServiceServer interface {
	// Recognize image and return recognition result
	Recognize(context.Context, *RecognitionRequest) (*RecognitionResponse, error)
	mustEmbedUnimplementedRecognitionServiceServer()
}

// UnimplementedRecognitionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRecognitionServiceServer struct {
}

func (UnimplementedRecognitionServiceServer) Recognize(context.Context, *RecognitionRequest) (*RecognitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Recognize not implemented")
}
func (UnimplementedRecognitionServiceServer) mustEmbedUnimplementedRecognitionServiceServer() {}

// UnsafeRecognitionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RecognitionServiceServer will
// result in compilation errors.
type UnsafeRecognitionServiceServer interface {
	mustEmbedUnimplementedRecognitionServiceServer()
}

func RegisterRecognitionServiceServer(s grpc.ServiceRegistrar, srv RecognitionServiceServer) {
	s.RegisterService(&RecognitionService_ServiceDesc, srv)
}

func _RecognitionService_Recognize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecognitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecognitionServiceServer).Recognize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecognitionService_Recognize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecognitionServiceServer).Recognize(ctx, req.(*RecognitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RecognitionService_ServiceDesc is the grpc.ServiceDesc for RecognitionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RecognitionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "recognition.RecognitionService",
	HandlerType: (*RecognitionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Recognize",
			Handler:    _RecognitionService_Recognize_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "recognition_service.proto",
}
