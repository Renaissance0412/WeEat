// Code generated by goctl. DO NOT EDIT.
// Source: rag_service.proto

package ragserviceclient

import (
	"context"

	"api-service/protos/ragservice"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	ChatMessageRequest    = ragservice.ChatMessageRequest
	ChatMessageResponse   = ragservice.ChatMessageResponse
	CheckUserRequest      = ragservice.CheckUserRequest
	CheckUserResponse     = ragservice.CheckUserResponse
	CreateContextRequest  = ragservice.CreateContextRequest
	CreateContextResponse = ragservice.CreateContextResponse
	CreateUserRequest     = ragservice.CreateUserRequest
	CreateUserResponse    = ragservice.CreateUserResponse
	FlushContextRequest   = ragservice.FlushContextRequest
	FlushContextResponse  = ragservice.FlushContextResponse

	RAGService interface {
		// Chat with stream response method
		StreamChat(ctx context.Context, in *ChatMessageRequest, opts ...grpc.CallOption) (ragservice.RAGService_StreamChatClient, error)
		// Chat with sync response method
		SyncChat(ctx context.Context, in *ChatMessageRequest, opts ...grpc.CallOption) (*ChatMessageResponse, error)
		// Create new user
		CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
		// Check user valid
		CheckUserValid(ctx context.Context, in *CheckUserRequest, opts ...grpc.CallOption) (*CheckUserResponse, error)
		// Create new chat context
		CreateChatContext(ctx context.Context, in *CreateContextRequest, opts ...grpc.CallOption) (*CreateContextResponse, error)
		// Flush chat history to database
		FlushChatHistory(ctx context.Context, in *FlushContextRequest, opts ...grpc.CallOption) (*FlushContextResponse, error)
	}

	defaultRAGService struct {
		cli zrpc.Client
	}
)

func NewRAGService(cli zrpc.Client) RAGService {
	return &defaultRAGService{
		cli: cli,
	}
}

// Chat with stream response method
func (m *defaultRAGService) StreamChat(ctx context.Context, in *ChatMessageRequest, opts ...grpc.CallOption) (ragservice.RAGService_StreamChatClient, error) {
	client := ragservice.NewRAGServiceClient(m.cli.Conn())
	return client.StreamChat(ctx, in, opts...)
}

// Chat with sync response method
func (m *defaultRAGService) SyncChat(ctx context.Context, in *ChatMessageRequest, opts ...grpc.CallOption) (*ChatMessageResponse, error) {
	client := ragservice.NewRAGServiceClient(m.cli.Conn())
	return client.SyncChat(ctx, in, opts...)
}

// Create new user
func (m *defaultRAGService) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	client := ragservice.NewRAGServiceClient(m.cli.Conn())
	return client.CreateUser(ctx, in, opts...)
}

// Check user valid
func (m *defaultRAGService) CheckUserValid(ctx context.Context, in *CheckUserRequest, opts ...grpc.CallOption) (*CheckUserResponse, error) {
	client := ragservice.NewRAGServiceClient(m.cli.Conn())
	return client.CheckUserValid(ctx, in, opts...)
}

// Create new chat context
func (m *defaultRAGService) CreateChatContext(ctx context.Context, in *CreateContextRequest, opts ...grpc.CallOption) (*CreateContextResponse, error) {
	client := ragservice.NewRAGServiceClient(m.cli.Conn())
	return client.CreateChatContext(ctx, in, opts...)
}

// Flush chat history to database
func (m *defaultRAGService) FlushChatHistory(ctx context.Context, in *FlushContextRequest, opts ...grpc.CallOption) (*FlushContextResponse, error) {
	client := ragservice.NewRAGServiceClient(m.cli.Conn())
	return client.FlushChatHistory(ctx, in, opts...)
}
