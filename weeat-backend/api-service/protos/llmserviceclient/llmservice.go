// Code generated by goctl. DO NOT EDIT.
// Source: llm_service.proto

package llmserviceclient

import (
	"context"

	"api-service/protos/llmservice"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	ChatMessage         = llmservice.ChatMessage
	ChatMessageRequest  = llmservice.ChatMessageRequest
	ChatMessageResponse = llmservice.ChatMessageResponse

	LLMService interface {
		// Chat with stream response method
		StreamChat(ctx context.Context, in *ChatMessageRequest, opts ...grpc.CallOption) (llmservice.LLMService_StreamChatClient, error)
		// Chat with sync response method
		SyncChat(ctx context.Context, in *ChatMessageRequest, opts ...grpc.CallOption) (*ChatMessageResponse, error)
	}

	defaultLLMService struct {
		cli zrpc.Client
	}
)

func NewLLMService(cli zrpc.Client) LLMService {
	return &defaultLLMService{
		cli: cli,
	}
}

// Chat with stream response method
func (m *defaultLLMService) StreamChat(ctx context.Context, in *ChatMessageRequest, opts ...grpc.CallOption) (llmservice.LLMService_StreamChatClient, error) {
	client := llmservice.NewLLMServiceClient(m.cli.Conn())
	return client.StreamChat(ctx, in, opts...)
}

// Chat with sync response method
func (m *defaultLLMService) SyncChat(ctx context.Context, in *ChatMessageRequest, opts ...grpc.CallOption) (*ChatMessageResponse, error) {
	client := llmservice.NewLLMServiceClient(m.cli.Conn())
	return client.SyncChat(ctx, in, opts...)
}
